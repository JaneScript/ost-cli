#!/usr/bin/env node
const program = require('commander');
const chalk = require('chalk');
const init = require('./run-init');
const package = require('./run-package');
const screen = require('../src/screen');

require('../src/store');

process.on('unhandledRejection', reason => {
  if(reason.__MSG__) {
    const msg = reason.__MSG__.toLowerCase();
    switch (true) {
      case Object.entries(__ERROR_STATUS__).join().toLowerCase().includes(msg):
        global.spinner.fail(msg.split('@')[1]);
        break;
      default:
        break;
    }
    console.log(reason.err);
  }
});

program
  .usage('[project-name]')
  .description('create a project from a remote template')
  .option('--package', 'create project from a local template')
  .option('--local', 'build in local environment for test')
  .option('--prod', 'build in production environment for test')
  .option('--stage', 'build in stage environment for test')
  .option('--test', 'build in test environment for test');

program.on('--help', () => {
  console.log();
  console.log('  Examples:');
  console.log();
  console.log(chalk.yellow('    $ npx ost-cli my-project'));
  console.log();
});

program.parse(process.argv);

screen();

const argvs = process.argv;
const append = argvs.find(arg => arg.indexOf('--') > -1);
switch(append) {
  case '--package':
    package(program);
    break;
  default:
    init(program);
    break;
}
